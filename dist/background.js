(()=>{async function e(){return new Promise((e,a)=>{chrome.identity.getAuthToken({interactive:!0},t=>{if(chrome.runtime.lastError||!t)return a(chrome.runtime.lastError);e(t)})})}async function a(e,a){const t=await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}?format=full`,{headers:{Authorization:`Bearer ${a}`}}),n=await t.json(),o=n.payload.headers||[];return{id:e,subject:o.find(e=>"Subject"===e.name)?.value||"",from:o.find(e=>"From"===e.name)?.value||"",snippet:n.snippet||""}}async function t(e){return new Promise(a=>chrome.storage.local.get([e],t=>a(!!t[e])))}async function n(e){chrome.storage.local.set({[e]:!0})}function o(e){chrome.notifications.create(e.id,{type:"basic",iconUrl:"icon128.png",title:`Important: ${e.subject}`,message:e.reason})}async function i(a,t){const n=await e();await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${a}/modify`,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(t)})}chrome.runtime.onMessage.addListener((r,s,c)=>{if("GET_GMAIL"===r.type)return(async()=>{const{count:i}=r;let s=await new Promise(e=>{chrome.storage.local.get(["cachedEmails"],a=>{e(a.cachedEmails||null)})});const m=Date.now();let l=[];s&&m-s.cachedAt<216e5&&(l=s.emails);const p=new Set(l.map(e=>e.id)),d=await async function(a){const t=await e(),n=await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages?q=is:unread newer_than:30d&maxResults=${a}`,{headers:{Authorization:`Bearer ${t}`}}),o=await n.json();return o.messages?.map(e=>e.id)||[]}(i),u=d.filter(e=>!p.has(e));let h=[];if(u.length){const i=await e();for(const e of u)h.push(await a(e,i));const r=await async function(e){const a=await async function(){return new Promise(e=>chrome.storage.sync.get(["openaiKey"],a=>e(a.openaiKey)))}();if(!a)throw new Error("No OpenAI key");const t=`\nYou determine if emails are personally important based on:\n- bills, job leads, security alerts, or if from close contacts\n\nReturn JSON keyed by id like:\n{ "XYZ": {"important": true, "reason":"..."} }\n\nEmails:\n${e.map(e=>`${e.id}) Subject: ${e.subject}\nFrom: ${e.from}\nSnippet: ${e.snippet}\n`).join("")}\n`,n=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:t}],temperature:.2})}),o=await n.json();return JSON.parse(o.choices[0].message.content)}(h);h=h.map(e=>({...e,important:r[e.id]?.important||!1,reason:r[e.id]?.reason||""}));for(const e of h)e.important&&!await t(e.id)&&(o(e),await n(e.id));l=[...h,...l],l.length>200&&(l=l.slice(0,200)),s={cachedAt:m,emails:l},function(e){chrome.storage.local.set({cachedEmails:e})}(s)}c({success:!0,emails:l})})().catch(e=>{console.error(e),c({success:!1,error:String(e)})}),!0;if("MARK_READ"===r.type&&(i(r.id,{removeLabelIds:["UNREAD"]}),c({ok:!0})),"MARK_SPAM"===r.type&&(i(r.id,{addLabelIds:["SPAM"],removeLabelIds:["INBOX"]}),c({ok:!0})),"SET_ICON_IMPORTANCE"===r.type){const e=r.hasImportant?{16:"email-radar-icon.png",32:"email-radar-icon.png",48:"email-radar-icon.png",128:"email-radar-icon.png"}:{16:"email-radar-icon-ni.png",32:"email-radar-icon-ni.png",48:"email-radar-icon-ni.png",128:"email-radar-icon-ni.png"};chrome.action.setIcon({path:e})}})})();