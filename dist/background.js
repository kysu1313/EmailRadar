(()=>{async function e(){return new Promise((e,t)=>{chrome.identity.getAuthToken({interactive:!0},n=>{if(chrome.runtime.lastError||!n)return t(chrome.runtime.lastError);e(n)})})}async function t(e,t){const n=await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${e}?format=full`,{headers:{Authorization:`Bearer ${t}`}}),a=await n.json(),o=a.payload.headers||[];return{id:e,subject:o.find(e=>"Subject"===e.name)?.value||"",from:o.find(e=>"From"===e.name)?.value||"",snippet:a.snippet||""}}function n(e){chrome.notifications.create(e.id,{type:"basic",iconUrl:"icon128.png",title:`Important Email: ${e.subject}`,message:e.reason})}async function a(e){return new Promise(t=>{chrome.storage.local.set({[e]:!0},()=>t())})}async function o(e){return new Promise(t=>{chrome.storage.local.get([e],n=>t(!!n[e]))})}chrome.runtime.onMessage.addListener((s,r,i)=>{if("GET_GMAIL"===s.type)return(async()=>{const s=await async function(){const t=await e(),n=await fetch("https://gmail.googleapis.com/gmail/v1/users/me/messages?q=is:unread newer_than:30d&maxResults=10",{headers:{Authorization:`Bearer ${t}`}});return(await n.json()).messages||[]}(),r=await e(),c=[];for(const e of s)c.push(await t(e.id,r));const m=await async function(e){const t=await async function(){return new Promise(e=>{chrome.storage.sync.get(["openaiKey"],t=>e(t.openaiKey))})}();if(!t)throw new Error("No OpenAI key set");const n=`\nYou are an assistant that determines if emails are personally important.\nImportant = messages about bills, job leads, security alerts, or from close contacts.\n\nReturn JSON keyed by id like:\n{ "xyz": { "important": true, "reason": "..." } }\n\nEmails:\n${e.map((e,t)=>`${e.id}) Subject: ${e.subject}\nFrom: ${e.from}\nSnippet: ${e.snippet}\n`).join("\n")}\n`,a=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"user",content:n}],temperature:.2})}),o=await a.json(),s=o.choices?.[0]?.message?.content??"{}";return JSON.parse(s)}(c);for(const e of c){const t=m[e.id];e.important=t?.important||!1,e.reason=t?.reason||"",e.important&&!await o(e.id)&&(n(e),await a(e.id))}i({success:!0,emails:c})})().catch(e=>{console.error(e),i({success:!1,error:String(e)})}),!0})})();